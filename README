NOTE(5/12/2018): code in deep need of refactoring, was pushed to keep on deadline

Team members: Hang Nguyen, Scott Little and Jason Esparza


Contributions:
- Hang Nguyen: parse the user request input, producer-consumer code, synchronization and a little bit of threading
- Scott Little: testing/debugging, threading, logic, code management, code maintenance
- Jason Esparza: memory management, debugging, socket management, and refactoring

Each group member contributed equally as our team met regularly to discuss, contribute, and debug accordingly.

The design decision:
We created the buffer with the size 2048 for receiving the http response as a chunk
and sends that chunks to the client in the while-loop.
We decided to use semaphores in order to ensure concurrency of a maximum of 30 users.

Strengths:
	Fully multi threaded for CPU(s) utilization
	Multiple clients can use proxy at same time
	Clients can load multiple pages at the same time
	Efficient memory management
	Functionally decomposed sending for easier readability
	Uses producer/consumer method to efficiently send/receive messages rather than storing in buffers
	Loads both light and heavy pages within minimal time
	Correctly manages sockets connections, closes when not used anymore
	Limits number of threads to not overload system or use too many sockets
	Sends 500 INTERNAL ERROR when data is corrupted or not accessible
	Compiles with Werror Wall and pedantic flags
	Proxy runs silently in console
	Proxy always stays running!

Weaknesses:
	Could functionally decompose more, and make use of header files
	Make use of more detailed commenting for even easier understanding of processes
	Statically allocated large buffer size, could use dynamic allocation with reallocation for memory management
	Some variables could be renamed to follow self documenting code (ie: found1, found2)

	
	
